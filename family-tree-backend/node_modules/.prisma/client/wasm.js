
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  password: 'password',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  memberId: 'memberId'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  name: 'name',
  gender: 'gender',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  personalInfo: 'personalInfo'
};

exports.Prisma.FamilyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isSubFamily: 'isSubFamily',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  creatorId: 'creatorId',
  headOfFamilyId: 'headOfFamilyId',
  parentFamilyId: 'parentFamilyId'
};

exports.Prisma.FamilyMembershipScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  memberId: 'memberId',
  familyId: 'familyId',
  role: 'role',
  type: 'type',
  autoEnrolled: 'autoEnrolled',
  manuallyEdited: 'manuallyEdited',
  isActive: 'isActive',
  joinDate: 'joinDate'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  code: 'code',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  status: 'status',
  usedAt: 'usedAt',
  acceptedBy: 'acceptedBy',
  familyId: 'familyId',
  inviterUserId: 'inviterUserId',
  inviterMemberId: 'inviterMemberId',
  memberStub: 'memberStub'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  url: 'url',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  uploadedBy: 'uploadedBy'
};

exports.Prisma.PostFileAttachmentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  fileId: 'fileId',
  order: 'order'
};

exports.Prisma.CommentFileAttachmentScalarFieldEnum = {
  id: 'id',
  commentId: 'commentId',
  fileId: 'fileId'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  imageUrls: 'imageUrls',
  videoUrl: 'videoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  visibility: 'visibility',
  authorId: 'authorId',
  familyId: 'familyId',
  likesCount: 'likesCount',
  editHistory: 'editHistory'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  postId: 'postId',
  authorId: 'authorId',
  parentCommentId: 'parentCommentId',
  likesCount: 'likesCount'
};

exports.Prisma.PostLikeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  postId: 'postId',
  memberId: 'memberId'
};

exports.Prisma.CommentLikeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  commentId: 'commentId',
  memberId: 'memberId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt',
  memberId: 'memberId',
  relatedPostId: 'relatedPostId',
  relatedCommentId: 'relatedCommentId',
  relatedMemberId: 'relatedMemberId',
  metadata: 'metadata'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.MemberStatus = exports.$Enums.MemberStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DECEASED: 'DECEASED',
  ARCHIVED: 'ARCHIVED'
};

exports.FamilyRole = exports.$Enums.FamilyRole = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  HEAD: 'HEAD',
  VIEWER: 'VIEWER'
};

exports.MembershipType = exports.$Enums.MembershipType = {
  MAIN: 'MAIN',
  SUB: 'SUB'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  VALID: 'VALID',
  USED: 'USED',
  EXPIRED: 'EXPIRED',
  REVOKED: 'REVOKED'
};

exports.FileType = exports.$Enums.FileType = {
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO'
};

exports.PostVisibility = exports.$Enums.PostVisibility = {
  PUBLIC: 'PUBLIC',
  FAMILY: 'FAMILY',
  SUBFAMILY: 'SUBFAMILY'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  POST_LIKE: 'POST_LIKE',
  COMMENT_LIKE: 'COMMENT_LIKE',
  NEW_COMMENT: 'NEW_COMMENT',
  NEW_POST: 'NEW_POST',
  MENTION: 'MENTION'
};

exports.Prisma.ModelName = {
  User: 'User',
  Member: 'Member',
  Family: 'Family',
  FamilyMembership: 'FamilyMembership',
  Invitation: 'Invitation',
  File: 'File',
  PostFileAttachment: 'PostFileAttachment',
  CommentFileAttachment: 'CommentFileAttachment',
  Post: 'Post',
  Comment: 'Comment',
  PostLike: 'PostLike',
  CommentLike: 'CommentLike',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
