generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication and account management
model User {
  id            String   @id @default(uuid())
  email         String?  @unique
  phone         String?  @unique
  password      String
  emailVerified Boolean  @default(false) @map("email_verified")
  phoneVerified Boolean  @default(false) @map("phone_verified")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Each user is linked to a member profile
  memberId String? @unique @map("member_id")
  member   Member? @relation(fields: [memberId], references: [id])

  // Users can invite others
  sentInvitations Invitation[] @relation("InviterUser")

  @@map("users")
}

// Core family tree entity - represents a person in the family tree
model Member {
  id        String       @id @default(uuid())
  name      String
  gender    Gender?
  status    MemberStatus @default(ACTIVE)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  // Personal information (stored as JSON for flexibility)
  personalInfo Json? @map("personal_info") // {bio, picture, birthDate, birthPlace, occupation, socialLinks, etc.}

  // Color system for visualization
  color        String? // Hex color code for member's own color
  parentColors String[] @default([]) @map("parent_colors") // Array of hex colors from parents

  // Family relationships - many-to-many self-referential
  // Parents of this member
  parents  Member[] @relation("ParentChild")
  // Children of this member
  children Member[] @relation("ParentChild")

  // Spouses - many-to-many self-referential
  spouses        Member[] @relation("Spouses")
  spousesReverse Member[] @relation("Spouses")

  // Family memberships with roles
  familyMemberships FamilyMembership[]

  // One user account per member
  user User?

  // Invitations sent by this member
  sentInvitations Invitation[] @relation("InviterMember")

  // Families created by this member
  createdFamilies Family[] @relation("FamilyCreator")
  // Families headed by this member
  headedFamilies  Family[] @relation("FamilyHead")

  // Social feed relationships
  posts                  Post[]         @relation("PostAuthor")
  comments               Comment[]      @relation("CommentAuthor")
  postLikes              PostLike[]     @relation("PostLiker")
  commentLikes           CommentLike[]  @relation("CommentLiker")
  notifications          Notification[] @relation("NotificationRecipient")
  triggeredNotifications Notification[] @relation("NotificationRelatedMember")

  // Files uploaded by this member
  uploadedFiles File[] @relation("FileUploader")

  @@map("members")
}

// Family group - can be main family or sub-family
model Family {
  id          String    @id @default(uuid())
  name        String
  description String?
  isSubFamily Boolean   @default(false) @map("is_sub_family")
  deletedAt   DateTime? @map("deleted_at") // Soft delete support
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Creator of the family
  creatorId String @map("creator_id")
  creator   Member @relation("FamilyCreator", fields: [creatorId], references: [id])

  // Head of family (optional, usually for sub-families)
  headOfFamilyId String? @map("head_of_family_id")
  headOfFamily   Member? @relation("FamilyHead", fields: [headOfFamilyId], references: [id])

  // Hierarchical structure - sub-families
  parentFamilyId String?  @map("parent_family_id")
  parentFamily   Family?  @relation("FamilyHierarchy", fields: [parentFamilyId], references: [id])
  subFamilies    Family[] @relation("FamilyHierarchy")

  // Members and their roles in this family
  memberships FamilyMembership[]

  // Invitations for this family
  invitations Invitation[]

  @@map("families")
}

// Junction table for member-family relationships with roles
model FamilyMembership {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Member and family relationship
  memberId String @map("member_id")
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  familyId String @map("family_id")
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  // Role in the family
  role FamilyRole @default(MEMBER)

  // Membership type and enrollment
  type           MembershipType @default(MAIN)
  autoEnrolled   Boolean        @default(false) @map("auto_enrolled") // Automatically added due to relationships
  manuallyEdited Boolean        @default(false) @map("manually_edited") // User manually opted in/out
  isActive       Boolean        @default(true) @map("is_active") // Current membership status

  // Join date
  joinDate DateTime @default(now()) @map("join_date")

  // Granular permissions
  familyMemberPermissions FamilyMemberPermission[]

  @@unique([memberId, familyId])
  @@map("family_memberships")
}

// Invitation system for joining families
model Invitation {
  id        String   @id @default(uuid())
  code      String   @unique // JWT or encoded string
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  // Status tracking
  status     InvitationStatus @default(VALID)
  usedAt     DateTime?        @map("used_at")
  acceptedBy String?          @map("accepted_by") // Member ID who accepted

  // Family being invited to
  familyId String @map("family_id")
  family   Family @relation(fields: [familyId], references: [id])

  // Who sent the invitation
  inviterUserId String? @map("inviter_user_id")
  inviterUser   User?   @relation("InviterUser", fields: [inviterUserId], references: [id])

  inviterMemberId String? @map("inviter_member_id")
  inviterMember   Member? @relation("InviterMember", fields: [inviterMemberId], references: [id])

  // Pre-filled member info (for profile stub)
  memberStub Json? @map("member_stub") // {name, relationship, basicInfo}

  @@map("invitations")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  DECEASED
  ARCHIVED
}

enum FamilyRole {
  ADMIN // Can manage family, invite members, create sub-families
  MEMBER // Regular family member
  HEAD // Head of family (for sub-families)
  VIEWER // Can only view, limited permissions
}

enum MembershipType {
  MAIN // Main family membership
  SUB // Sub-family membership
}

enum InvitationStatus {
  VALID
  USED
  EXPIRED
  REVOKED
}

enum PostVisibility {
  PUBLIC // Visible to all app users
  FAMILY // Visible to family members only
  SUBFAMILY // Visible to sub-family members only
}

enum NotificationType {
  POST_LIKE
  COMMENT_LIKE
  NEW_COMMENT
  NEW_POST
  MENTION
}

enum FileType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
}

// File Upload System

// File entity for uploaded files
model File {
  id           String   @id @default(uuid())
  filename     String // Generated filename on server
  originalName String   @map("original_name") // Original filename from user
  mimeType     String   @map("mime_type")
  size         Int // File size in bytes
  url          String // Public URL to access the file
  type         FileType
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Who uploaded the file
  uploadedBy String @map("uploaded_by")
  uploader   Member @relation("FileUploader", fields: [uploadedBy], references: [id], onDelete: Cascade)

  // Relationships to entities that use files
  postAttachments    PostFileAttachment[]
  commentAttachments CommentFileAttachment[]

  @@map("files")
}

// Junction table for post file attachments
model PostFileAttachment {
  id     String @id @default(uuid())
  postId String @map("post_id")
  fileId String @map("file_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  order  Int    @default(0) // Order of attachment in post

  @@unique([postId, fileId])
  @@map("post_file_attachments")
}

// Junction table for comment file attachments
model CommentFileAttachment {
  id        String  @id @default(uuid())
  commentId String  @map("comment_id")
  fileId    String  @map("file_id")
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  file      File    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([commentId, fileId])
  @@map("comment_file_attachments")
}

// Social Feed Models

// Post entity for social feed
model Post {
  id        String   @id @default(uuid())
  content   String
  imageUrls String[] @map("image_urls") // Array of image URLs
  videoUrl  String?  @map("video_url") // Single video URL
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Privacy and visibility
  visibility PostVisibility @default(FAMILY)

  // Author relationship
  authorId String @map("author_id")
  author   Member @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  // Family context (optional - for family-specific posts)
  familyId String? @map("family_id")

  // Social interactions
  comments   Comment[]  @relation("PostComments")
  likes      PostLike[] @relation("PostLikes")
  likesCount Int        @default(0) @map("likes_count")

  // Edit history tracking
  editHistory Json? @map("edit_history") // Array of edits with timestamps

  // File attachments
  fileAttachments PostFileAttachment[]

  @@map("posts")
}

// Comment entity for posts
model Comment {
  id        String   @id @default(uuid())
  content   String
  imageUrl  String?  @map("image_url") // Optional image in comment
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Post relationship
  postId String @map("post_id")
  post   Post   @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)

  // Author relationship
  authorId String @map("author_id")
  author   Member @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  // Nested comments (replies)
  parentCommentId String?   @map("parent_comment_id")
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")

  // Social interactions
  likes      CommentLike[] @relation("CommentLikes")
  likesCount Int           @default(0) @map("likes_count")

  // File attachments
  fileAttachments CommentFileAttachment[]

  @@map("comments")
}

// Like entity for posts
model PostLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  // Post relationship
  postId String @map("post_id")
  post   Post   @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)

  // Member relationship
  memberId String @map("member_id")
  member   Member @relation("PostLiker", fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([postId, memberId])
  @@map("post_likes")
}

// Like entity for comments
model CommentLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  // Comment relationship
  commentId String  @map("comment_id")
  comment   Comment @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  // Member relationship
  memberId String @map("member_id")
  member   Member @relation("CommentLiker", fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([commentId, memberId])
  @@map("comment_likes")
}

// Notification entity for social interactions
model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  message   String
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")

  // Recipient
  memberId String @map("member_id")
  member   Member @relation("NotificationRecipient", fields: [memberId], references: [id], onDelete: Cascade)

  // Related entities (polymorphic)
  relatedPostId    String? @map("related_post_id")
  relatedCommentId String? @map("related_comment_id")
  relatedMemberId  String? @map("related_member_id") // Who triggered the notification
  relatedMember    Member? @relation("NotificationRelatedMember", fields: [relatedMemberId], references: [id], onDelete: Cascade)

  // Metadata
  metadata Json? // Additional data like post title, comment preview, etc.

  @@map("notifications")
}

// Enhanced Permissions System

// Granular permissions for family members beyond basic roles
model FamilyMemberPermission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Family membership relationship
  familyMemberId String           @map("family_member_id")
  familyMember   FamilyMembership @relation(fields: [familyMemberId], references: [id], onDelete: Cascade)

  // Permission details
  permission String // Permission enum value
  grantedBy  String   @map("granted_by") // Member ID who granted the permission
  grantedAt  DateTime @default(now()) @map("granted_at")

  @@unique([familyMemberId, permission])
  @@map("family_member_permissions")
}
